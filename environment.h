#ifndef ENVIROMENT_H
#define ENVIROMENT_H
#include <stdio.h>
#include <iostream>
#include <fstream>
//#include <boost/program_options.hpp>

#include "../vowpalwabbit/vw.h"
#include "../vowpalwabbit/parser.h"
#include "item.h"
#include "submodOracle.h"
#include "globalheaders.h"
using namespace std;

//namespace po = boost::program_options;

class environment
{
  public:

    environment();
    //if not setting it, by default is linear regression as specified in constructor
    void setAlgoType(ml::algorithm_t algo){algo_ = algo;}
    void setBudget(double budget){budget_ = budget;} 
    void read_from_stream(vw* model, istream &fin); //numLines is the number of items
    void updateSimFeatures(vw* model, submodOracle & fOracle); 
    void updateSimFeaturesPredictOnly(vw* model);
    const vector<int>& getListPrediction(){return predList_;}
    void multiRoundTrain(vw* model, submodOracle & fOracle, bool useGreedyPolicy = false, int numPasses = 1);
    void multiRoundPredictOnly(vw* model);
    void release_items_vwexample(vw * model);
    vector<double> getPerSlotScore( submodOracle & fOracle);
    const double & getSubModScore(){return curSubModScore_;}
    int get_numItems(){return items_.size();}

 private:

    //  string fileName_;
    //   int numItems;
    ml::algorithm_t algo_;
    double budget_;
    double curBudget_;
    double curSubModScore_;
    bool haveSpace_;
    vector<int> predList_; 
    vector<item> items_; 
    bool * tag_usable;
    //  vector<bool> isOutofBudget;
    double get_dis2set( item & itm); //now implemented as sum of dis, subject to change, should specify the type of distance; 
    vector<double>  getVecSimVals();
    void linear_regression(vw *model, int numPasses = 1);  //make sure it's specified as square loss or default
    void svm_rank(vw* model, int numPasses =1); //make sure it's specified as hinge loss
    // use data generated by a single slot/position in the list to train the model
    void oneRoundTrain(vw* model, int numPasses =1);  
    // use model or ground truth label(marginal gain) to  
    void oneRoundPrediction(vw* model, bool useGreedyOracle = false);
};

#endif
